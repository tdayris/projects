import sys
import pandas
import os.path

from snakemake.utils import min_version, makedirs
from pathlib import Path
from typing import Any, Dict

if sys.version_info < (3, 8):
    raise SystemError("Please use Python 3.8 or later")

min_version('5.16.0')
git = "https://raw.githubusercontent.com/tdayris/snakemake-wrappers/Unofficial"
container: "docker://continuumio/miniconda3:5.0.1"

bam_path = Path("www.cnrgh.fr/data/GENETS/alignements/set1")
fastq_path = Path("www.cnrgh.fr/data/GENETS/fastq/set1/")
vcf_dict = Path("filtres/results/")

bam_dict = {
    f.stem: str(f.absolute())
    for f in bam_path.iterdir()
    if str(f.name).endswith("bam")
}

fastq_dict = {
    f.stem: str(f.absolute())
    for f in fastq_path.iterdir()
    if str(f.name).endswith("fastq.gz")
}

vcf_dict = {
    f.stem: str(f.absolute())
    for f in fastq_path.iterdir()
    if str(f.name).endswith("vcf.gz")
}

wildcard_constraints:
    bam = "|".join(bam_dict.keys())

rule all:
    input:
        "Statistics.tar.bz2"
    message:
        "Finishing pipeline"


##############################################################################
########## BAM ###############################################################
##############################################################################
rule index_bam:
    input:
        "www.cnrgh.fr/data/GENETS/alignements/set1/{bam}.bam"
    output:
        "www.cnrgh.fr/data/GENETS/alignements/set1/{bam}.bam.bai"
    message:
        "Indexing {wildcards.bam}"
    threads:
        1
    resources:
        mem_mb = (
            lambda wildcards, attempt: min(attempt * 1024, 10240)
        ),
        time_min = (
            lambda wildcards, attempt: min(attempt * 20, 200)
        )
    log:
        "logs/samtools/index/{bam}.log"
    wrapper:
        f"{git}/bio/samtools/index"


rule samtools_flagstat:
    input:
        "www.cnrgh.fr/data/GENETS/alignements/set1/{bam}.bam",
        "www.cnrgh.fr/data/GENETS/alignements/set1/{bam}.bam.bai"
    output:
        temp("samtools/flagstat/{bam}.bam.flagstat")
    message:
        "Gathering statistics over {wildcards.bam}'s mapping"
    threads:

    resources:
        mem_mb = (
            lambda wildcards, attempt: min(attempt * 1024, 10240)
        ),
        time_min = (
            lambda wildcards, attempt: min(attempt * 20, 200)
        )
    log:
        "logs/samtools/flagstat/{bam}.log"
    wrapper:
        f"{git}/bio/samtools/flagstat"


##############################################################################
########## VCF ###############################################################
##############################################################################
rule bcftools_stat:
    input:
        vcf = "filtres/results//{vcf}.vcf.gz",
        tbi = "filtres/results//{vcf}.vcf.gz.tbi"
    output:
        stat = temp("bcftools/stat/{vcf}.stat")
    message:
        "Gathering statistics over {wildcards.vcf}'s calling"
    threads:
        1
    resources:
        mem_mb = (
            lambda wildcards, attempt: min(attempt * 1024, 10240)
        ),
        time_min = (
            lambda wildcards, attempt: min(attempt * 20, 200)
        )
    conda:
        "../../envs/biotools.yaml"
    log:
        "logs/bcftools/stat/{vcf}.log"
    shell:
        "bcftools stat {input.vcf} > {output.vcf} 2> {log}"


##############################################################################
########## FASTQ #############################################################
##############################################################################
rule fastqc:
    input:
        "www.cnrgh.fr/data/GENETS/fastq/set1/{fastq}.fastq.gz"
    output:
        tmp("fastqc/{fastq}_fastqc.html")
    message:
        "QC on {wildcards.fastq}'s fastq"
    threads:
        1
    resources:
        mem_mb = (
            lambda wildcards, attempt: min(attempt * 1024, 10240)
        ),
        time_min = (
            lambda wildcards, attempt: min(attempt * 20, 200)
        )
    log:
        "logs/fastqc/{fastq}.log"
    wrapper:
        f"{git}/bio/fastqc"


rule fastq_screen:
    input:
        "www.cnrgh.fr/data/GENETS/fastq/set1/{fastq}.fastq.gz"
    output:
        txt = temp("fqscreen/{fastq}.fastq_screen.txt"),
        png = temp("fqscreen/{fastq}.fastq_screen.png")
    message:
        "Screening {wildcards.fastq}"
    params:
        subset = 100000,
        fastq_screen_config = {
            "database": {
                "Human": {"bowtie2": "/mnt/beegfs/database/bioinfo/Index_DB/FastQ_Screen/0.13.0/Human/Homo_sapiens.GRCh38"},
                "Mouse": {"bowtie2": "/mnt/beegfs/database/bioinfo/Index_DB/FastQ_Screen/0.13.0/Mouse/Mus_musculus.GRCm38"},
                "Rat": {"bowtie2": "/mnt/beegfs/database/bioinfo/Index_DB/FastQ_Screen/0.13.0/Rat/Rnor_6.0"},
                "Drosophila": {"bowtie2": "/mnt/beegfs/database/bioinfo/Index_DB/FastQ_Screen/0.13.0/Drosophila/BDGP6"},
                "Worm": {"bowtie2": "/mnt/beegfs/database/bioinfo/Index_DB/FastQ_Screen/0.13.0/Worm/Caenorhabditis_elegans.WBcel235"},
                "Yeast": {"bowtie2": "/mnt/beegfs/database/bioinfo/Index_DB/FastQ_Screen/0.13.0/Yeast/Saccharomyces_cerevisiae.R64-1-1"},
                "Arabidopsis": {"bowtie2": "/mnt/beegfs/database/bioinfo/Index_DB/FastQ_Screen/0.13.0/Arabidopsis/Arabidopsis_thaliana.TAIR10"},
                "Ecoli": {"bowtie2": "/mnt/beegfs/database/bioinfo/Index_DB/FastQ_Screen/0.13.0/E_coli/Ecoli"},
                "rRNA": {"bowtie2": "/mnt/beegfs/database/bioinfo/Index_DB/FastQ_Screen/0.13.0/rRNA/GRCm38_rRNA"},
                "MT": {"bowtie2": "/mnt/beegfs/database/bioinfo/Index_DB/FastQ_Screen/0.13.0/Mitochondria/mitochondria"},
                "PhiX": {"bowtie2": "/mnt/beegfs/database/bioinfo/Index_DB/FastQ_Screen/0.13.0/PhiX/phi_plus_SNPs"},
                "Lambda": {"bowtie2": "/mnt/beegfs/database/bioinfo/Index_DB/FastQ_Screen/0.13.0/Lambda/Lambda"},
                "Vectors": {"bowtie2": "/mnt/beegfs/database/bioinfo/Index_DB/FastQ_Screen/0.13.0/Vectors/Vectors"},
                "Adapters": {"bowtie2": "/mnt/beegfs/database/bioinfo/Index_DB/FastQ_Screen/0.13.0/Adapters/Contaminants"},
                "SalmoSalar": {"bowtie2": "/mnt/beegfs/database/bioinfo/Index_DB/FastQ_Screen/0.13.0/Salmo_salar/SalmoSalar.ICSASGv2"},
            },
            "aligner_paths": {'bowtie': 'bowtie', 'bowtie2': 'bowtie2'}
        },
        aligner = 'bowtie2'
    threads:
        8
    resources:
        mem_mb = (
                lambda wildcards, attempt: min(10240 * attempt, 15360)
            ),
        time_min = (
            lambda wildcards, attempt: min(115 * attempt, 480)
        )
    log:
        "logs/fastq_screen/{fastq}.log"
    wrapper:
        f"{git}/bio/fastq_screen"


rule tar:
    input:
        expand(
            "samtools/flagstat/{bam}.bam.flagstat",
            bam=bam_dict.keys()
        ),
        expand(
            "bcftools/stat/{vcf}.stat",
            vcf=vcf_dict.keys()
        ),
        expand(
            "fastqc/{fastq}_fastqc.html",
            fastq=fastq_dict.keys()
        ),
        expand(
            "fqscreen/{fastq}.fastq_screen.txt",
            fastq=fastq_dict.keys()
        ),
        expand(
            "fqscreen/{fastq}.fastq_screen.png",
            fastq=fastq_dict.keys()
        )
    output:
        "Statistics.tar.bz2"
    message:
        "Compressing statistics in order to preserve space"
    threads:
        1
    resources:
        mem_mb = (
            lambda wildcards, attempt: min(attempt * 1024, 10240)
        ),
        time_min = (
            lambda wildcards, attempt: min(attempt * 20, 200)
        )
    conda:
        "../../envs/bash.yaml"
    log:
        "logs/tar.log"
    shell:
        "tar -vcjf {output} {input} 2> {log}"
